// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Storage.Models
{
    using Azure;
    using Management;
    using Storage;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Network ACL
    /// </summary>
    public partial class StorageNetworkRules
    {
        /// <summary>
        /// Initializes a new instance of the StorageNetworkRules class.
        /// </summary>
        public StorageNetworkRules() { }

        /// <summary>
        /// Initializes a new instance of the StorageNetworkRules class.
        /// </summary>
        /// <param name="defaultAction">Specifies the default action of allow
        /// or deny when no other rules match. Possible values include:
        /// 'allow', 'deny'</param>
        /// <param name="bypass">Specifies whether traffic is bypassed for
        /// Logging/Metrics/Azureservices. Possible values are any combination
        /// of Logging|Metrics|Azureservices, or None to bypass none of those
        /// traffics. Possible values include: 'None', 'Logging', 'Metrics',
        /// 'Azureservices'</param>
        /// <param name="virtualNetworkRules">Sets the virtual network ACL
        /// rules</param>
        /// <param name="ipRules">Sets the IP ACL rules</param>
        public StorageNetworkRules(DefaultAction defaultAction, Bypass? bypass = default(Bypass?), IList<VirtualNetworkRule> virtualNetworkRules = default(IList<VirtualNetworkRule>), IList<IpRule> ipRules = default(IList<IpRule>))
        {
            Bypass = bypass;
            VirtualNetworkRules = virtualNetworkRules;
            IpRules = ipRules;
            DefaultAction = defaultAction;
        }

        /// <summary>
        /// Gets or sets specifies whether traffic is bypassed for
        /// Logging/Metrics/Azureservices. Possible values are any combination
        /// of Logging|Metrics|Azureservices, or None to bypass none of those
        /// traffics. Possible values include: 'None', 'Logging', 'Metrics',
        /// 'Azureservices'
        /// </summary>
        [JsonProperty(PropertyName = "bypass")]
        public Bypass? Bypass { get; set; }

        /// <summary>
        /// Gets or sets sets the virtual network ACL rules
        /// </summary>
        [JsonProperty(PropertyName = "virtualNetworkRules")]
        public IList<VirtualNetworkRule> VirtualNetworkRules { get; set; }

        /// <summary>
        /// Gets or sets sets the IP ACL rules
        /// </summary>
        [JsonProperty(PropertyName = "ipRules")]
        public IList<IpRule> IpRules { get; set; }

        /// <summary>
        /// Gets or sets specifies the default action of allow or deny when no
        /// other rules match. Possible values include: 'allow', 'deny'
        /// </summary>
        [JsonProperty(PropertyName = "defaultAction")]
        public DefaultAction DefaultAction { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VirtualNetworkRules != null)
            {
                foreach (var element in VirtualNetworkRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (IpRules != null)
            {
                foreach (var element1 in IpRules)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}

