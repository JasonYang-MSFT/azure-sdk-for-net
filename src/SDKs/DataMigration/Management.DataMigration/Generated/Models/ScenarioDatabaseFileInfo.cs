// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataMigrationService.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.DataMigrationService;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Database file specific information
    /// </summary>
    public partial class ScenarioDatabaseFileInfo
    {
        /// <summary>
        /// Initializes a new instance of the ScenarioDatabaseFileInfo class.
        /// </summary>
        public ScenarioDatabaseFileInfo()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScenarioDatabaseFileInfo class.
        /// </summary>
        /// <param name="databaseName">Name of the database</param>
        /// <param name="id">Unique identifier for database file</param>
        /// <param name="logicalName">Logical name of the file</param>
        /// <param name="physicalFullName">Operating-system full path of the
        /// file</param>
        /// <param name="restoreFullName">Suggested full path of the file for
        /// restoring</param>
        /// <param name="fileType">Database file type. Possible values include:
        /// 'Rows', 'Log', 'Filestream', 'NotSupported', 'Fulltext'</param>
        /// <param name="sizeMB">Size of the file in megabytes</param>
        public ScenarioDatabaseFileInfo(string databaseName = default(string), string id = default(string), string logicalName = default(string), string physicalFullName = default(string), string restoreFullName = default(string), DatabaseFileType? fileType = default(DatabaseFileType?), double? sizeMB = default(double?))
        {
            DatabaseName = databaseName;
            Id = id;
            LogicalName = logicalName;
            PhysicalFullName = physicalFullName;
            RestoreFullName = restoreFullName;
            FileType = fileType;
            SizeMB = sizeMB;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the database
        /// </summary>
        [JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets unique identifier for database file
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets logical name of the file
        /// </summary>
        [JsonProperty(PropertyName = "logicalName")]
        public string LogicalName { get; set; }

        /// <summary>
        /// Gets or sets operating-system full path of the file
        /// </summary>
        [JsonProperty(PropertyName = "physicalFullName")]
        public string PhysicalFullName { get; set; }

        /// <summary>
        /// Gets or sets suggested full path of the file for restoring
        /// </summary>
        [JsonProperty(PropertyName = "restoreFullName")]
        public string RestoreFullName { get; set; }

        /// <summary>
        /// Gets or sets database file type. Possible values include: 'Rows',
        /// 'Log', 'Filestream', 'NotSupported', 'Fulltext'
        /// </summary>
        [JsonProperty(PropertyName = "fileType")]
        public DatabaseFileType? FileType { get; set; }

        /// <summary>
        /// Gets or sets size of the file in megabytes
        /// </summary>
        [JsonProperty(PropertyName = "sizeMB")]
        public double? SizeMB { get; set; }

    }
}
