// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataMigration;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Scenario that migrates MySQL databases to Azure and SQL Server
    /// databases
    /// </summary>
    [Newtonsoft.Json.JsonObject("DataMigration.RunMySqlMigration")]
    public partial class RunMySqlMigrationScenario : Scenario
    {
        /// <summary>
        /// Initializes a new instance of the RunMySqlMigrationScenario class.
        /// </summary>
        public RunMySqlMigrationScenario()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RunMySqlMigrationScenario class.
        /// </summary>
        /// <param name="input">Scenario configuration</param>
        public RunMySqlMigrationScenario(RunMySqlMigrationScenarioInput input)
        {
            Input = input;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets scenario configuration
        /// </summary>
        [JsonProperty(PropertyName = "input")]
        public RunMySqlMigrationScenarioInput Input { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Input == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Input");
            }
            if (Input != null)
            {
                Input.Validate();
            }
        }
    }
}
