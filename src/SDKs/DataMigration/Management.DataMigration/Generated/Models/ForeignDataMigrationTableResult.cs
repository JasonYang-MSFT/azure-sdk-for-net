// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataMigration;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Object used to report the data migration results of a table
    /// </summary>
    public partial class ForeignDataMigrationTableResult
    {
        /// <summary>
        /// Initializes a new instance of the ForeignDataMigrationTableResult
        /// class.
        /// </summary>
        public ForeignDataMigrationTableResult()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForeignDataMigrationTableResult
        /// class.
        /// </summary>
        /// <param name="resultCode">Result code of the data migration.
        /// Possible values include: 'Initial', 'Completed',
        /// 'ObjectNotExistsInSource', 'ObjectNotExistsInTarget',
        /// 'TargetObjectIsInaccessible', 'FatalError'</param>
        /// <param name="sourceName">Name of the source table</param>
        /// <param name="targetName">Name of the target table</param>
        /// <param name="sourceRowCount">Number of rows in the source
        /// table</param>
        /// <param name="targetRowCount">Number of rows in the target
        /// table</param>
        /// <param name="elapsedTimeInMiliseconds">Time taken to migrate the
        /// data</param>
        /// <param name="errors">Mapping from error text to error type</param>
        public ForeignDataMigrationTableResult(DataMigrationResultCode? resultCode = default(DataMigrationResultCode?), string sourceName = default(string), string targetName = default(string), long? sourceRowCount = default(long?), long? targetRowCount = default(long?), double? elapsedTimeInMiliseconds = default(double?), IDictionary<string, ErrorType?> errors = default(IDictionary<string, ErrorType?>))
        {
            ResultCode = resultCode;
            SourceName = sourceName;
            TargetName = targetName;
            SourceRowCount = sourceRowCount;
            TargetRowCount = targetRowCount;
            ElapsedTimeInMiliseconds = elapsedTimeInMiliseconds;
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets result code of the data migration. Possible values
        /// include: 'Initial', 'Completed', 'ObjectNotExistsInSource',
        /// 'ObjectNotExistsInTarget', 'TargetObjectIsInaccessible',
        /// 'FatalError'
        /// </summary>
        [JsonProperty(PropertyName = "resultCode")]
        public DataMigrationResultCode? ResultCode { get; set; }

        /// <summary>
        /// Gets or sets name of the source table
        /// </summary>
        [JsonProperty(PropertyName = "sourceName")]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or sets name of the target table
        /// </summary>
        [JsonProperty(PropertyName = "targetName")]
        public string TargetName { get; set; }

        /// <summary>
        /// Gets or sets number of rows in the source table
        /// </summary>
        [JsonProperty(PropertyName = "sourceRowCount")]
        public long? SourceRowCount { get; set; }

        /// <summary>
        /// Gets or sets number of rows in the target table
        /// </summary>
        [JsonProperty(PropertyName = "targetRowCount")]
        public long? TargetRowCount { get; set; }

        /// <summary>
        /// Gets or sets time taken to migrate the data
        /// </summary>
        [JsonProperty(PropertyName = "elapsedTimeInMiliseconds")]
        public double? ElapsedTimeInMiliseconds { get; set; }

        /// <summary>
        /// Gets or sets mapping from error text to error type
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IDictionary<string, ErrorType?> Errors { get; set; }

    }
}
