// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataMigration;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Base class for all DMS scenario results
    /// </summary>
    public partial class ScenarioResult
    {
        /// <summary>
        /// Initializes a new instance of the ScenarioResult class.
        /// </summary>
        public ScenarioResult()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScenarioResult class.
        /// </summary>
        /// <param name="errors">An array of errors</param>
        /// <param name="state">The state of the task. Possible values include:
        /// 'Canceled', 'Failed', 'FailedValidation', 'Faulted', 'Queued',
        /// 'Running', 'Succeeded', 'Unknown'</param>
        public ScenarioResult(IList<ODataError> errors = default(IList<ODataError>), ServiceTaskState? state = default(ServiceTaskState?))
        {
            Errors = errors;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets an array of errors
        /// </summary>
        [JsonProperty(PropertyName = "errors")]
        public IList<ODataError> Errors { get; private set; }

        /// <summary>
        /// Gets the state of the task. Possible values include: 'Canceled',
        /// 'Failed', 'FailedValidation', 'Faulted', 'Queued', 'Running',
        /// 'Succeeded', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public ServiceTaskState? State { get; private set; }

    }
}
