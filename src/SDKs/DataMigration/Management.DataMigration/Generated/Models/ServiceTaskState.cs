// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataMigration;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ServiceTaskState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ServiceTaskState
    {
        [EnumMember(Value = "Canceled")]
        Canceled,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "FailedValidation")]
        FailedValidation,
        [EnumMember(Value = "Faulted")]
        Faulted,
        [EnumMember(Value = "Queued")]
        Queued,
        [EnumMember(Value = "Running")]
        Running,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "Unknown")]
        Unknown
    }
    internal static class ServiceTaskStateEnumExtension
    {
        internal static string ToSerializedValue(this ServiceTaskState? value)  =>
            value == null ? null : ((ServiceTaskState)value).ToSerializedValue();

        internal static string ToSerializedValue(this ServiceTaskState value)
        {
            switch( value )
            {
                case ServiceTaskState.Canceled:
                    return "Canceled";
                case ServiceTaskState.Failed:
                    return "Failed";
                case ServiceTaskState.FailedValidation:
                    return "FailedValidation";
                case ServiceTaskState.Faulted:
                    return "Faulted";
                case ServiceTaskState.Queued:
                    return "Queued";
                case ServiceTaskState.Running:
                    return "Running";
                case ServiceTaskState.Succeeded:
                    return "Succeeded";
                case ServiceTaskState.Unknown:
                    return "Unknown";
            }
            return null;
        }

        internal static ServiceTaskState? ParseServiceTaskState(this string value)
        {
            switch( value )
            {
                case "Canceled":
                    return ServiceTaskState.Canceled;
                case "Failed":
                    return ServiceTaskState.Failed;
                case "FailedValidation":
                    return ServiceTaskState.FailedValidation;
                case "Faulted":
                    return ServiceTaskState.Faulted;
                case "Queued":
                    return ServiceTaskState.Queued;
                case "Running":
                    return ServiceTaskState.Running;
                case "Succeeded":
                    return ServiceTaskState.Succeeded;
                case "Unknown":
                    return ServiceTaskState.Unknown;
            }
            return null;
        }
    }
}
