// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataMigrationService.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.DataMigrationService;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines the inputs for the foreign migration scenario
    /// </summary>
    public partial class StartForeignMigrationScenarioInputBase
    {
        /// <summary>
        /// Initializes a new instance of the
        /// StartForeignMigrationScenarioInputBase class.
        /// </summary>
        public StartForeignMigrationScenarioInputBase()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// StartForeignMigrationScenarioInputBase class.
        /// </summary>
        /// <param name="targetConnectionInfo">Information for connecting to
        /// target</param>
        /// <param name="targetDatabaseName">Target database name</param>
        /// <param name="projectName">Name of the migration project</param>
        /// <param name="projectLocation">An URL that points to the drop
        /// location to access project artifacts</param>
        /// <param name="selectedTables">Metadata of the tables selected for
        /// migration</param>
        public StartForeignMigrationScenarioInputBase(ConnectionInfo targetConnectionInfo, string targetDatabaseName, string projectName, string projectLocation, IList<ForeignDataMigrationTableResult> selectedTables)
        {
            TargetConnectionInfo = targetConnectionInfo;
            TargetDatabaseName = targetDatabaseName;
            ProjectName = projectName;
            ProjectLocation = projectLocation;
            SelectedTables = selectedTables;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets information for connecting to target
        /// </summary>
        [JsonProperty(PropertyName = "targetConnectionInfo")]
        public ConnectionInfo TargetConnectionInfo { get; set; }

        /// <summary>
        /// Gets or sets target database name
        /// </summary>
        [JsonProperty(PropertyName = "targetDatabaseName")]
        public string TargetDatabaseName { get; set; }

        /// <summary>
        /// Gets or sets name of the migration project
        /// </summary>
        [JsonProperty(PropertyName = "projectName")]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or sets an URL that points to the drop location to access
        /// project artifacts
        /// </summary>
        [JsonProperty(PropertyName = "projectLocation")]
        public string ProjectLocation { get; set; }

        /// <summary>
        /// Gets or sets metadata of the tables selected for migration
        /// </summary>
        [JsonProperty(PropertyName = "selectedTables")]
        public IList<ForeignDataMigrationTableResult> SelectedTables { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetConnectionInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetConnectionInfo");
            }
            if (TargetDatabaseName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetDatabaseName");
            }
            if (ProjectName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProjectName");
            }
            if (ProjectLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProjectLocation");
            }
            if (SelectedTables == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectedTables");
            }
        }
    }
}
