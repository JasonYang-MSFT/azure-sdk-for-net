// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataMigrationService.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.DataMigrationService;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Input for get user tables scenario
    /// </summary>
    public partial class GetUserTablesForMigrationScenarioInput
    {
        /// <summary>
        /// Initializes a new instance of the
        /// GetUserTablesForMigrationScenarioInput class.
        /// </summary>
        public GetUserTablesForMigrationScenarioInput()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// GetUserTablesForMigrationScenarioInput class.
        /// </summary>
        /// <param name="connectionInfo">Information for connecting to
        /// server</param>
        /// <param name="selectedDatabases">Databases to collect tables
        /// for</param>
        public GetUserTablesForMigrationScenarioInput(ConnectionInfo connectionInfo, IList<string> selectedDatabases = default(IList<string>))
        {
            ConnectionInfo = connectionInfo;
            SelectedDatabases = selectedDatabases;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets information for connecting to server
        /// </summary>
        [JsonProperty(PropertyName = "connectionInfo")]
        public ConnectionInfo ConnectionInfo { get; set; }

        /// <summary>
        /// Gets or sets databases to collect tables for
        /// </summary>
        [JsonProperty(PropertyName = "selectedDatabases")]
        public IList<string> SelectedDatabases { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConnectionInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConnectionInfo");
            }
        }
    }
}
