// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataMigration.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DataMigration;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Database information for Azure Sql Db
    /// </summary>
    public partial class AzureSqlDbDatabaseInfo : Database
    {
        /// <summary>
        /// Initializes a new instance of the AzureSqlDbDatabaseInfo class.
        /// </summary>
        public AzureSqlDbDatabaseInfo()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureSqlDbDatabaseInfo class.
        /// </summary>
        /// <param name="id">Unique identifier for the database</param>
        /// <param name="name">Name of the database</param>
        /// <param name="compatibilityLevel">SQL Server compatibility level of
        /// database. Possible values include: 'CompatLevel80',
        /// 'CompatLevel90', 'CompatLevel100', 'CompatLevel110',
        /// 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'</param>
        /// <param name="collation">Collation name of the database</param>
        /// <param name="serverName">Name of the server</param>
        /// <param name="fqdn">Fully qualified name</param>
        /// <param name="installId">Install id of the database</param>
        /// <param name="serverVersion">Version of the server</param>
        /// <param name="serverEdition">Edition of the server</param>
        /// <param name="serverLevel">Product level of the server (RTM, SP,
        /// CTP).</param>
        /// <param name="serverDefaultDataPath">Default path of the data
        /// files</param>
        /// <param name="serverDefaultLogPath">Default path of the log
        /// files</param>
        /// <param name="serverDefaultBackupPath">Default path of the backup
        /// folder</param>
        /// <param name="serverCoreCount">Number of cores on the server</param>
        /// <param name="serverVisibleOnlineCoreCount">Number of cores on the
        /// server that have VISIBLE ONLINE status</param>
        /// <param name="databaseState">State of the database. Possible values
        /// include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending',
        /// 'Suspect', 'Emergency', 'Offline', 'Copying',
        /// 'OfflineSecondary'</param>
        /// <param name="serverId">The unique Server Id</param>
        /// <param name="targetDatabaseName">Name of target database</param>
        /// <param name="sizeMB">Size of the database in megabytes</param>
        /// <param name="makeSourceDbReadOnly">Whether to set database read
        /// only before migration</param>
        /// <param name="tableMap">Mapping of source to target tables</param>
        public AzureSqlDbDatabaseInfo(string id = default(string), string name = default(string), DatabaseCompatLevel? compatibilityLevel = default(DatabaseCompatLevel?), string collation = default(string), string serverName = default(string), string fqdn = default(string), string installId = default(string), string serverVersion = default(string), string serverEdition = default(string), string serverLevel = default(string), string serverDefaultDataPath = default(string), string serverDefaultLogPath = default(string), string serverDefaultBackupPath = default(string), int? serverCoreCount = default(int?), int? serverVisibleOnlineCoreCount = default(int?), DatabaseState? databaseState = default(DatabaseState?), string serverId = default(string), string targetDatabaseName = default(string), double? sizeMB = default(double?), bool? makeSourceDbReadOnly = default(bool?), IDictionary<string, string> tableMap = default(IDictionary<string, string>))
            : base(id, name, compatibilityLevel, collation, serverName, fqdn, installId, serverVersion, serverEdition, serverLevel, serverDefaultDataPath, serverDefaultLogPath, serverDefaultBackupPath, serverCoreCount, serverVisibleOnlineCoreCount, databaseState, serverId)
        {
            TargetDatabaseName = targetDatabaseName;
            SizeMB = sizeMB;
            MakeSourceDbReadOnly = makeSourceDbReadOnly;
            TableMap = tableMap;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of target database
        /// </summary>
        [JsonProperty(PropertyName = "targetDatabaseName")]
        public string TargetDatabaseName { get; set; }

        /// <summary>
        /// Gets or sets size of the database in megabytes
        /// </summary>
        [JsonProperty(PropertyName = "sizeMB")]
        public double? SizeMB { get; set; }

        /// <summary>
        /// Gets or sets whether to set database read only before migration
        /// </summary>
        [JsonProperty(PropertyName = "makeSourceDbReadOnly")]
        public bool? MakeSourceDbReadOnly { get; set; }

        /// <summary>
        /// Gets or sets mapping of source to target tables
        /// </summary>
        [JsonProperty(PropertyName = "tableMap")]
        public IDictionary<string, string> TableMap { get; set; }

    }
}
