// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataMigrationService.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.DataMigrationService;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Object level result for StartMigrationScenario
    /// </summary>
    public partial class StartMigrationScenarioObjectLevelResult : MigrationScenarioResult
    {
        /// <summary>
        /// Initializes a new instance of the
        /// StartMigrationScenarioObjectLevelResult class.
        /// </summary>
        public StartMigrationScenarioObjectLevelResult()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// StartMigrationScenarioObjectLevelResult class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="name">Name of the database object</param>
        /// <param name="state">Current state of migration. Possible values
        /// include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
        /// 'Skipped'</param>
        /// <param name="itemsCompletedCount">Number of successfully completed
        /// items</param>
        /// <param name="errorCount">Count of database/object errors</param>
        /// <param name="errorResultPrefix">Prefix string to use for querying
        /// errors for this table</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        public StartMigrationScenarioObjectLevelResult(string id = default(string), DatabaseObjectName name = default(DatabaseObjectName), MigrationState? state = default(MigrationState?), long? itemsCompletedCount = default(long?), long? errorCount = default(long?), string errorResultPrefix = default(string), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?))
            : base(id)
        {
            Name = name;
            State = state;
            ItemsCompletedCount = itemsCompletedCount;
            ErrorCount = errorCount;
            ErrorResultPrefix = errorResultPrefix;
            StartedOn = startedOn;
            EndedOn = endedOn;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the database object
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public DatabaseObjectName Name { get; private set; }

        /// <summary>
        /// Gets current state of migration. Possible values include: 'None',
        /// 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public MigrationState? State { get; private set; }

        /// <summary>
        /// Gets number of successfully completed items
        /// </summary>
        [JsonProperty(PropertyName = "itemsCompletedCount")]
        public long? ItemsCompletedCount { get; private set; }

        /// <summary>
        /// Gets count of database/object errors
        /// </summary>
        [JsonProperty(PropertyName = "errorCount")]
        public long? ErrorCount { get; private set; }

        /// <summary>
        /// Gets prefix string to use for querying errors for this table
        /// </summary>
        [JsonProperty(PropertyName = "errorResultPrefix")]
        public string ErrorResultPrefix { get; private set; }

        /// <summary>
        /// Gets or sets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; set; }

        /// <summary>
        /// Gets or sets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; set; }

    }
}
