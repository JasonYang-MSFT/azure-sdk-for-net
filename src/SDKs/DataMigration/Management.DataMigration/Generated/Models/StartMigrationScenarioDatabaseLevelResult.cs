// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.DataMigrationService.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.DataMigrationService;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Database level result for StartMigrationScenario
    /// </summary>
    public partial class StartMigrationScenarioDatabaseLevelResult : MigrationScenarioResult
    {
        /// <summary>
        /// Initializes a new instance of the
        /// StartMigrationScenarioDatabaseLevelResult class.
        /// </summary>
        public StartMigrationScenarioDatabaseLevelResult()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// StartMigrationScenarioDatabaseLevelResult class.
        /// </summary>
        /// <param name="id">Result identifier</param>
        /// <param name="name">Name of the database</param>
        /// <param name="state">Current state of migration. Possible values
        /// include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
        /// 'Skipped'</param>
        /// <param name="stage">Current stage of migration. Possible values
        /// include: 'None', 'Initialize', 'Backup', 'FileCopy', 'Restore',
        /// 'Completed'</param>
        /// <param name="startedOn">Migration start time</param>
        /// <param name="endedOn">Migration end time</param>
        /// <param name="message">Migration progress message</param>
        /// <param name="exceptionsAndWarnings">Migration exceptions and
        /// warnings</param>
        /// <param name="numberOfObjectsCompleted">Number of database
        /// artifacts/objects completed</param>
        /// <param name="numberOfObjects">Total number of database
        /// artifacts/objects</param>
        /// <param name="errorCount">Count of database/object errors</param>
        /// <param name="objectSummary">Source databases as a map from database
        /// name to database id</param>
        public StartMigrationScenarioDatabaseLevelResult(string id = default(string), string name = default(string), MigrationState? state = default(MigrationState?), DatabaseMigrationStage? stage = default(DatabaseMigrationStage?), System.DateTimeOffset? startedOn = default(System.DateTimeOffset?), System.DateTimeOffset? endedOn = default(System.DateTimeOffset?), string message = default(string), IList<ReportableException> exceptionsAndWarnings = default(IList<ReportableException>), int? numberOfObjectsCompleted = default(int?), int? numberOfObjects = default(int?), int? errorCount = default(int?), IDictionary<string, StartMigrationScenarioObjectSummaryResult> objectSummary = default(IDictionary<string, StartMigrationScenarioObjectSummaryResult>))
            : base(id)
        {
            Name = name;
            State = state;
            Stage = stage;
            StartedOn = startedOn;
            EndedOn = endedOn;
            Message = message;
            ExceptionsAndWarnings = exceptionsAndWarnings;
            NumberOfObjectsCompleted = numberOfObjectsCompleted;
            NumberOfObjects = numberOfObjects;
            ErrorCount = errorCount;
            ObjectSummary = objectSummary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the database
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets current state of migration. Possible values include: 'None',
        /// 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public MigrationState? State { get; private set; }

        /// <summary>
        /// Gets current stage of migration. Possible values include: 'None',
        /// 'Initialize', 'Backup', 'FileCopy', 'Restore', 'Completed'
        /// </summary>
        [JsonProperty(PropertyName = "stage")]
        public DatabaseMigrationStage? Stage { get; private set; }

        /// <summary>
        /// Gets migration start time
        /// </summary>
        [JsonProperty(PropertyName = "startedOn")]
        public System.DateTimeOffset? StartedOn { get; private set; }

        /// <summary>
        /// Gets migration end time
        /// </summary>
        [JsonProperty(PropertyName = "endedOn")]
        public System.DateTimeOffset? EndedOn { get; private set; }

        /// <summary>
        /// Gets migration progress message
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; private set; }

        /// <summary>
        /// Gets migration exceptions and warnings
        /// </summary>
        [JsonProperty(PropertyName = "exceptionsAndWarnings")]
        public IList<ReportableException> ExceptionsAndWarnings { get; private set; }

        /// <summary>
        /// Gets number of database artifacts/objects completed
        /// </summary>
        [JsonProperty(PropertyName = "numberOfObjectsCompleted")]
        public int? NumberOfObjectsCompleted { get; private set; }

        /// <summary>
        /// Gets total number of database artifacts/objects
        /// </summary>
        [JsonProperty(PropertyName = "numberOfObjects")]
        public int? NumberOfObjects { get; private set; }

        /// <summary>
        /// Gets count of database/object errors
        /// </summary>
        [JsonProperty(PropertyName = "errorCount")]
        public int? ErrorCount { get; private set; }

        /// <summary>
        /// Gets source databases as a map from database name to database id
        /// </summary>
        [JsonProperty(PropertyName = "objectSummary")]
        public IDictionary<string, StartMigrationScenarioObjectSummaryResult> ObjectSummary { get; private set; }

    }
}
